stages:
  - name: Lint
  - name: Build
  - name: Test
  - name: Publish
    if: branch = master OR commit_message = "[publish]"

import:
  - source: Alfresco/alfresco-process-tools:.travis.pre-commit.yml@master
  - source: Alfresco/alfresco-process-tools:.travis.helm_install.yml@master
  - source: Alfresco/alfresco-process-tools:.travis.helm-docs_install.yml@master
  - source: Alfresco/alfresco-process-tools:.travis.kubepug_install.yml@master

cache:
  directories:
    - ${HOME}/.m2

branches:
  only:
    - master
    - /AUTH-.*/
    - /OPSEXP-.*/

before_install:
  - pip install --upgrade awscli

jobs:
  include:
    - name: Build
      stage: Build
      language: java
      jdk: openjdk11
      script: |
        cd distribution
        # build and package
        make || { echo "Command failed with error code $?"; sleep 1; exit 1; }
        # security scan the build
        source build.properties
        # upload ZIP file to S3 bucket
        aws s3 cp alfresco-identity-service-${IDENTITY_VERSION}.md5 s3://${S3_ARTIFACTS_BUCKET}/build-${TRAVIS_BUILD_NUMBER}/
        aws s3 cp alfresco-identity-service-${IDENTITY_VERSION}.zip s3://${S3_ARTIFACTS_BUCKET}/build-${TRAVIS_BUILD_NUMBER}/
    - name: Test ZIP on Linux
      stage: Test
      script: |
        source distribution/build.properties
        echo "IDENTITY_VERSION=${IDENTITY_VERSION}"
        aws s3 cp s3://${S3_ARTIFACTS_BUCKET}/build-${TRAVIS_BUILD_NUMBER}/alfresco-identity-service-${IDENTITY_VERSION}.zip .
        chmod +x distribution/tests/endpoints.sh
        distribution/tests/endpoints.sh
      #after_script: |
        # empty the artifacts bucket (in case there were previous failed builds)
        # aws s3 rm s3://${S3_ARTIFACTS_BUCKET}/build-${TRAVIS_BUILD_NUMBER}/ --recursive
    - name: Test Windows
      stage: Test
      os: windows
      language: shell
      script:
        - source distribution/build.properties
        - echo "IDENTITY_VERSION=${IDENTITY_VERSION}"
        - aws configure set aws_access_key_id ${AWS_SECRET_ACCESS_KEY}
        - aws configure set aws_secret_access_key ${AWS_ACCESS_KEY_ID}
        - aws configure set default.region ${AWS_DEFAULT_REGION}
        - aws s3 ls s3://${S3_ARTIFACTS_BUCKET}/build-${TRAVIS_BUILD_NUMBER}/
        - aws s3 ls s3://${S3_ARTIFACTS_BUCKET}/build-${TRAVIS_BUILD_NUMBER}/alfresco-identity-service-${IDENTITY_VERSION}.zip
        - aws s3 cp s3://${S3_ARTIFACTS_BUCKET}/build-${TRAVIS_BUILD_NUMBER}/alfresco-identity-service-${IDENTITY_VERSION}.zip .
        - unzip alfresco-identity-service-${IDENTITY_VERSION}.zip
        - cd alfresco-identity-service-${IDENTITY_VERSION}/bin
        - choco install jdk8 -params 'installdir=c:\\jdk' -y
        - export JAVA_HOME=${JAVA_HOME:-/c/jdk}
        - export PATH=${JAVA_HOME}/bin:${PATH}
        - powershell -Command Get-ExecutionPolicy
        - powershell -Command 'Set-ExecutionPolicy unrestricted'
        - powershell -Command /c/Users/travis/build/Alfresco/alfresco-identity-service/distribution/tests/endpoints_ps.ps1
        - powershell -Command /c/Users/travis/build/Alfresco/alfresco-identity-service/distribution/tests/endpoints_bat.ps1
    - name: Publish S3
      stage: Publish
      before_deploy:
        - source distribution/build.properties
        - export IDENTITY_VERSION=${IDENTITY_VERSION}
        - aws s3 cp s3://${S3_ARTIFACTS_BUCKET}/build-${TRAVIS_BUILD_NUMBER}/alfresco-identity-service-${IDENTITY_VERSION}.zip ./deploy_dir/alfresco-identity-service-${IDENTITY_VERSION}.zip
        - aws s3 cp s3://${S3_ARTIFACTS_BUCKET}/build-${TRAVIS_BUILD_NUMBER}/alfresco-identity-service-${IDENTITY_VERSION}.md5 ./deploy_dir/alfresco-identity-service-${IDENTITY_VERSION}.md5
        - aws s3 rm s3://${S3_ARTIFACTS_BUCKET}/build-${TRAVIS_BUILD_NUMBER}/ --recursive
      language: bash
      deploy:
        provider: s3
        access_key_id: "${STAGING_AWS_ACCESS_KEY}"
        secret_access_key: "${STAGING_AWS_SECRET_KEY}"
        bucket: "${S3_STAGING_BUCKET}"
        skip_cleanup: true
        region: "eu-west-1"
        local_dir: "deploy_dir"
        upload-dir: "enterprise/alfresco-identity-service/"
        on:
           all_branches: true
    - name: Publish DockerHub
      stage: Publish
      script:
        - source distribution/build.properties
        - export IDENTITY_VERSION=${IDENTITY_VERSION}
        - export PRIVATE_IMAGE=quay.io/alfresco/alfresco-identity-service:${IDENTITY_VERSION}
        - export PUBLIC_IMAGE=alfresco/alfresco-identity-service:${IDENTITY_VERSION}
        - docker rmi ${PRIVATE_IMAGE}
        - echo "$DOCKER_PASSWORD_QUAY" | docker login quay.io -u "$DOCKER_USERNAME_QUAY" --password-stdin
        - docker pull ${PRIVATE_IMAGE}
        - docker tag ${PRIVATE_IMAGE} ${PUBLIC_IMAGE}
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker push ${PUBLIC_IMAGE}
